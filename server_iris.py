import socket
import time
import wrapper_iris_tracking_pb2

M_SIZE = 1024
# 
host = '127.0.0.1'
port = 8080

locaddr = (host, port)

test_message = [b"\n\x94>\n\x0f\rz\xe9\xf5>\x15X_!?\x1d\x8f\xae\xa1\xbc\n\x0f\r\x86\xac\xfb>\x15\xdc\xe9\x15?\x1d\xec4_\xbd\n\x0f\rm\xd2\xf7>\x15fi\x18?\x1d\nt\xc7\xbc\n\x0f\r{\xeb\xf7>\x15\x1e\xab\x06?\x1d\xdd\xb5O\xbd\n\x0f\r\xe2\xd6\xfc>\x15 \xf4\x11?\x1d\x8d\x98v\xbd\n\x0f\r\x9e1\xfd>\x15\xc4\xf2\x0b?\x1d cq\xbd\n\x0f\ra\x0e\xfd>\x15\x82\xc0\xf7>\x1dlN \xbd\n\x0f\r\xedZ\xcf>\x15\x8bS\xe6>\x1d\xbe\xcb\x91\xbc\n\x0f\rx[\xff>\x15d\xe0\xdc>\x1d\x89\x96\x1a\xbd\n\x0f\r=\x83\x00?\x15D{\xd0>\x1d\xa6\xf11\xbd\n\x0f\r\xc2\x03\x02?\x15`\xdc\xa5>\x1d=\xdeA\xbd\n\x0f\r\xefI\xf5>\x15\x14K#?\x1d~\x18\x8d\xbc\n\x0f\r\xc9z\xf4>\x154\x9e$?\x1d\xd7(T\xbc\n\x0f\r\x9d\xac\xf3>\x15=\xfd$?\x1dT<\xf8\xbb\n\x0f\rB6\xf3>\x15\xbdB'?\x1dW\xb1\xf3\xba\n\x0f\r\xaf\xf5\xf2>\x15\xe2N)?\x1d\x12e\x1d\xbb\n\x0f\r~x\xf2>\x15\x8e\x9e+?\x1d\xd3\xc30\xbb\n\x0f\r\xd2\xa9\xf1>\x15\xb2\xb4-?\x1d\xd1\xd1\x99:\n\x0f\r\xe7\x0c\xf0>\x15\x8c//?\x1d/\xebh<\n\x0f\r\xd0f\xfa>\x15&\x92\x17?\x1d\x00\xf8D\xbd\n\x0f\r\x9e\xfd\xf3>\x15\xf77\x16?\x1d\x8aE\x10\xbd\n\x0f\rHG\xb7>\x15\xc7\xe1\xb5>\x1d\xfb(0<\n\x0f\r6\xe3\xe0>\x15\xa9\x7f\xf2>\x1d\xa4u\xab\xbc\n\x0f\r\xaf\xc8\xda>\x15\x1f\x03\xf2>\x1d\xb2u\xb4\xbc\n\x0f\rY\xc2\xd4>\x15\xc3)\xf0>\x1dX\x91\xad\xbc\n\x0f\rO\x9e\xcc>\x15\xfa\xe5\xe7>\x1d\xe1\x9e\x82\xbc\n\x0f\r\x9f\x00\xe6>\x15T`\xf1>\x1d{\xff\x8d\xbc\n\x0f\rb\xab\xda>\x15\x99\x9b\xd7>\x1d^j\x04\xbd\n\x0f\r\xbc{\xe1>\x15:#\xda>\x1d\xb7{\xf3\xbc\n\x0f\r\x9b\xf7\xd3>\x15\xb1p\xd7>\x1d\xc1q\xf7\xbc\n\x0f\r\x001\xcf>\x15\x9d\xad\xd9>\x1dL_\xdb\xbc\n\x0f\r\xde\x18\xc7>\x15\xee\x05\xec>\x1d\x88y+\xbc\n\x0f\rI6\xda>\x15\xd4\x8c0?\x1d\xe7\x9e\xb8<\n\x0f\r\xf0\xf1\xcc>\x15j\xae\xe2>\x1d\xe2l{\xbc\n\x0f\r\x00\x91\xb2>\x15b\xdd\xdb>\x1d(\x92\xde<\n\x0f\ry\\\xc0>\x15t\x17\xe2>\x1d\x8f\x19\x87\xbb\n\x0f\r\x1c\x1d\xda>\x15\xf0s\x0b?\x1d\xaf\x8d\x98\xbc\n\x0f\r]\xf1\xee>\x15\xba7 ?\x1d\x9a\x10\xb0\xbc\n\x0f\r\x9ai\xee>\x15\x7f\x14$?\x1d\xa2\tf\xbc\n\x0f\r\xa7\xcf\xe6>\x152\x87 ?\x1d7\xc7\x90\xbc\n\x0f\rB`\xe1>\x150\x10!?\x1d\xc7\xb1:\xbc\n\x0f\r(\xad\xe8>\x15\xff\x9f#?\x1d\x1e\xafM\xbc\n\x0f\r\xc8'\xe4>\x15\x105#?\x1d\xa0c\xdd\xbb\n\x0f\r\xe8R\xd7>\x15\x0e\xfa$?\x1da9\x15<\n\x0f\r\x1f\x03\xf7>\x15\x9fY\x15?\x1d\xe7\x85b\xbd\n\x0f\r\xd8>\xf7>\x154e\x11?\x1d\xac`y\xbd\n\x0f\r;^\xc7>\x15LQ\xcd>\x1d\xa6\xe7\xf0\xbc\n\x0f\ry\xa4\xe7>\x15\xb7\xf5\x01?\x1d\x014\xba\xbc\n\x0f\rZ\x18\xe7>\x15\xd12\x11?\x1d\xec\x93\x11\xbd\n\x0f\r\x9e\x99\xe6>\x157y\x0e?\x1d\x08n\n\xbd\n\x0f\r\xce?\xc7>\x15-\xee\x07?\x1d!\xd1X\xbc\n\x0f\r\xd3\xba\xf7>\x15\x8b\xc1\x0b?\x1dD\xa4m\xbd\n\x0f\r\x12\xe5\xd7>\x15p?\xc8>\x1d\xe6>/\xbd\n\x0f\r/\xad\xce>\x15\xcc\xce\xc8>\x1d`[\x18\xbd\n\x0f\r$\x8a\xc0>\x15=N\xaa>\x1df\x8dA\xbc\n\x0f\r\t\x19\xf2>\x15O\x01\xd7>\x1dd\xce$\xbd\n\x0f\r\xa8\xc8\xe6>\x15\x03\xfe\xde>\x1d\xa78\xc5\xbc\n\x0f\r\xe8\x01\xd4>\x15\xb4\xe3 ?\x1dP,\xc6;\n\x0f\r\xd0n\xb1>\x15\xd6\xf6\x12?\x1d\\\x8c\xb0=\n\x0f\rc\xa4\xea>\x15\x17\xe6\x13?\x1d^P\xeb\xbc\n"]

# ①ソケットを作成する
sock = socket.socket(socket.AF_INET, type=socket.SOCK_DGRAM)
print('create socket')

# ②自ホストで使用するIPアドレスとポート番号を指定
sock.bind(locaddr)


def ListIrisTracking(wrapperIrisTracking):

    #NormalizedLandmarkList landmarks = 1;
    #optional NormalizedRect rect = 2;
    #optional DetectionList detection = 3;

    #print ("Landmarks: ",wrapperIrisTracking.landmarks)
    print("rect: ",wrapper_iris_tracking.rect)
    print("detection: ",wrapper_iris_tracking.detection)
    print("right_eye_rect:",wrapper_iris_tracking.right_eye_rect )

while True:
    try :
        # ③Clientからのmessageの受付開始
        print('Waiting message')
        message, cli_addr = sock.recvfrom(M_SIZE)
        #message = message.decode(encoding='utf-8')

        #*todo ここでmessageをprotobufのWrapperHandTracking形式でdecodeする
        wrapper_iris_tracking = wrapper_iris_tracking_pb2.WrapperIrisTracking()
        wrapper_iris_tracking.ParseFromString(message)
        #print(f'Received message is [{message}]')
        #break

        ListIrisTracking(wrapper_iris_tracking)

        #print(f'Received message is [{message}]')

        # Clientが受信待ちになるまで待つため
        #time.sleep(1)

        # ④Clientへ受信完了messageを送信
        #print('Send response to Client')
        #sock.sendto('Success to receive message'.encode(encoding='utf-8'), cli_addr)

    except KeyboardInterrupt:
        print ('\n . . .\n')
        sock.close()
        break
